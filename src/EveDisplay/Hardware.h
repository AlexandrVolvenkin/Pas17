//------------------------------------------------------------------------------
// Описание аппаратного обеспечения / управление портами GPIO
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#ifndef __HARDWARE_DESCRIPTION_H
#define __HARDWARE_DESCRIPTION_H
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//#include <ioavr.h>
//#include <intrinsics.h>
//#include <pgmspace.h>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//****************************** МАКРОСЫ ***************************************
//------------------------------------------------------------------------------
//#define XTAL	14.7456			// Тактовая частота контроллера, МГц

#define XTAL	7.3728			// Тактовая частота контроллера, МГц    [## XTAL DIV]

#define BIT(x)  (1 << (x))       	// Определение макросов
#define LOW(x)  ((x) & 0xFF)
#define HIGH(x) ((x) >> 8)
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Класс описания апаратного обеспечения модуля
class HARD
{
private:
public:
    static bool ZeroStart;                 // Признак запуска после перепрошивки (== true)

    enum PORT_PINS
    {
        MISO		= 3,			// PB3 - Выход данных   <= SPI интерфейс        ++++
        MOSI		= 2,			// PB2 - Вход данных
        SCK		= 1,			// PB1 - Тактовые импульсы
        SS		= 0,			// PB0 - Пин SS

        MCU_INT       = 0,                    // PD0 - Вход прерывания от MCU                 ++++
        EVE_INT       = 1,                    // PD1 - Вход прерывания от видеопроцессора     ++++

        SIN           = 2,                    // PD2 - Вход данных    <= EVE интерфейс        ++++
        SOUT          = 3,                    // PD3 - Выход данных                           ++++
        SXCK          = 5,                    // PD5 - Тактовые импульсы                      ++++

        EVE_CS        = 4,                    // PD4 - Выборка видеопроцессора   (Active low) ++++
        EVE_PD        = 6,                    // PD6 - Сигнал PowerDown / Reset  (Active low) ++++


        CMISO         = 2,                    // PC2 - Вход данных    <= Локальная шина                       ++++
        CMOSI         = 1,                    // PC1 - Выход данных
        CSCK          = 0,                    // PC0 - Тактовые импульсы
        FRAM_CS	= 3,			// PC3 - Выборка чипа FRAM

        KEY_S1        = 4,                    // PA4 - Кнопка S1 ("A" / "")                                   ++++ OK
        KEY_S2        = 5,                    // PA5 - Кнопка S2 ("B" / "")
        KEY_S3        = 6,                    // PA6 - Кнопка S3 ("C" / "")
        KEY_S4        = 7,                    // PA7 - Кнопка S4 ("D" / "")


        LED1_RED      = 5,                    // PF5 - RED компонента светодиода HL1   (active high)          ++++ OK
        LED1_GREEN    = 6,                    // PF6 - GREEN компонента светодиода HL1 (active high)
        LED1_BLUE     = 7,                    // PF7 - BLUE компонента светодиода HL1  (active high)

        LED2_RED      = 2,                    // PF2 - RED компонента светодиода HL2   (active high)          ++++ OK
        LED2_GREEN    = 3,                    // PF3 - GREEN компонента светодиода HL2 (active high)
        LED2_BLUE     = 4,                    // PF4 - BLUE компонента светодиода HL2  (active high)

        SOUND         = 0,                    // PG0 - Разрешение звука (active high)                         ++++ OK

        // Vinculum II interface to Atmega USART =====================================
        RXD_0         = 0,                    // PE0 - Receive input USART 0          (INP)
        TXD_0         = 1,                    // PE1 - Transmit output USART 0        (OUT)

        RTS_0         = 2,                    // PA2 - Request To Send                (OUT)
        CTS_0         = 3                     // PA3 - Clear To Send                  (INP)
                        //============================================================================
    };


    static void Initialize(void);          // Инициализация аппаратного обеспечения
// static bool ZeroStartCheck(void);      // Проверка запуска после перепрошивки


    static void SetRGBLed_1(unsigned char);
    static void SetRGBLed_2(unsigned char);

    static inline void SetRGBLed_1(unsigned char,unsigned char,unsigned char);
    static inline void SetRGBLed_2(unsigned char,unsigned char,unsigned char);

    static inline void EnableSound(void);
    static inline void DisableSound(void);
    static inline void Beep(unsigned short);

    static void SaveEEPROM(unsigned short,void *,unsigned char);
    static void ReadEEPROM(void *,unsigned short,unsigned char);

};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//************************** INLINE - ФУНКЦИИ **********************************
//------------------------------------------------------------------------------
void HARD::EnableSound(void)
{
//    PORTG |= BIT(HARD::SOUND);
};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void HARD::DisableSound(void)
{
//    PORTG &= ~BIT(HARD::SOUND);
};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void HARD::SetRGBLed_1(unsigned char R,unsigned char G,unsigned char B)
{
//    HARD::SetRGBLed_1((R & 0x01) | ((G & 0x01) << 1L) | ((B & 0x01) << 2L));
};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void HARD::SetRGBLed_2(unsigned char R,unsigned char G,unsigned char B)
{
//    HARD::SetRGBLed_2((R & 0x01) | ((G & 0x01) << 1UL) | ((B & 0x01) << 2UL));
};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Звуковой сигнал (в милисекундах)
void HARD::Beep(unsigned short Miliseconds)
{
//    HARD::EnableSound();
//    __watchdog_reset();
//    //__delay_cycles(XTAL * Miliseconds * 1000L);
//    HARD::DisableSound();
};
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#endif //__HARDWARE_DESCRIPTION_H
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
