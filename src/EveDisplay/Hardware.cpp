////------------------------------------------------------------------------------
//// Описание апаратного обеспечения / управление портами GPIO
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//#include "Hardware.h"
//
//#include "TASK.h"
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////***************************** ДАННЫЕ *****************************************
////------------------------------------------------------------------------------
//bool HARD::ZeroStart = false;
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////***************************** ПРЕРЫВАНИЯ *************************************
////------------------------------------------------------------------------------
//
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////***************************** ФУНКЦИИ ****************************************
////------------------------------------------------------------------------------
//void HARD::Initialize(void)
//{
//    ACSR |= BIT(ACD);			// Запрещаем аналоговый компаратор
//
//// DDRA = 0x9C;   PORTA = 0xFC;           // PA3,4,7 - выходы на светодиоды,PA2 - звук, PA5,6 - кнопки S1,S2
////DDRA = 0x9C;   PORTA = 0xFC;           // PA3,4,7 - выходы на светодиоды,PA2 - звук, PA5,6 - кнопки S1,S2
//
//// DDRB = 0x09;   PORTB = 0x06;           // PB1,2 - входы SCK,MOSI, PB3 - выход MISO, PB0 = SS - выход (Low)
//
//// DDRB = 0x01;   PORTB = 0x00;           // PB0 == SS - выход (Low)                    ??????
//
////DDRC = 0x0B;   PORTC = 0x08;           // PC0,1,3 - выход CSCK,CMOSI, FRAM_CS, PC2 - вход CMISO
//
//
//    DDRD = 0x78;
//    PORTD = 0x57;           // PD0,1 - входы прерываний MCU,EVE, PD2 - вход SIN, PD3,4,5,6 - выходы SOUT,EVE_CS,SXCK,EVE_PD ++++
//    DDRC = 0x0B;
//    PORTC = 0x0C;           // PC0,1,3 - выход CSCK,CMOSI, FRAM_CS, PC2 - вход CMISO        ++++
//    DDRA = 0x00;
//    PORTA = 0xF0;           // PA4-7 - входы кнопок S1-4                                    ++++
//    DDRF = 0xFC;
//    PORTF = 0x00;           // PF2-7 - выход на RGB светодиоды HL1,HL2                      ++++
//
//    DDRG = 0x01;
//    PORTG = 0x00;           // PG0 - выход Sound
//
//// Vinculum II interface to Atmega USART
//    DDRE   = 0x02;
//    PORTE  = 0x03;          // PE0 - вход  RXD_0, PE1 - выход TXD_0
//    DDRA  |= 0x04;
//    PORTA |= 0x0C;          // PA2 - выход RTS, PA3 - вход CTS
//
//
//    /*
//     EICRA  = BIT(ISC11)|BIT(ISC10);	// Разрешаем прерывание INT0,1 по падающему фронту
//     //EIMSK  = BIT(INT1)|BIT(INT0);
//
//     EIMSK  = BIT(INT0);
//    */
//
//    EICRA = BIT(ISC11) | BIT(ISC01);       // INT1,0 по спаду
//    EIMSK = BIT(INT1)  | BIT(INT0);
//
//    /*
//     TCNT1 = 0x0000;		                // Обнуляем таймер-счетчик 1 (16 бит)
//     OCR1A = 0x047F;               	                // Период 5 мс
//
//     TIMSK1 = BIT(OCIE1A);			        // Прерывание по совпадению с OCR1A
//     TCCR1B = BIT(WGM12)|BIT(CS11)|BIT(CS10);       // Clear on compare OCR1A, SCK / 64
//    */
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Проверка запуска после перепрошивки
///*
//bool HARD::ZeroStartCheck(void)
//{
// static unsigned char __eeprom RE_PROG @ 0x0010 = 0xFA;
//
// unsigned char Flag;
//
// ReadEEPROM(&Flag,(unsigned short)&RE_PROG,sizeof(RE_PROG));
//
// if(Flag == 0xFA)
// {
//  Flag = 0x05;
//  SaveEEPROM((unsigned short)&RE_PROG,&Flag,sizeof(RE_PROG));   // Старт после перепрошивки
//  ZeroStart = true;
// }
//  else
// {
//  ZeroStart = false;                                            // Обычный старт
// };
//
// return ZeroStart;
//};*/
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Управление RGB-светодиодом HL1 (RGB компоненты - биты 0,1,2)
//void HARD::SetRGBLed_1(unsigned char Color)
//{
//    unsigned char Port = PORTF & (~(BIT(HARD::LED1_RED) | BIT(HARD::LED1_GREEN) | BIT(HARD::LED1_BLUE)));
//
//    if(Color & 0x01) Port |= BIT(HARD::LED1_RED);
//    if(Color & 0x02) Port |= BIT(HARD::LED1_GREEN);
//    if(Color & 0x04) Port |= BIT(HARD::LED1_BLUE);
//
//    PORTF = Port;
//
//    /*
//     if(Color & 0x01) PORTA &= ~BIT(HARD::LED_RED);    else    PORTA |= BIT(HARD::LED_RED);
//     if(Color & 0x02) PORTA &= ~BIT(HARD::LED_GREEN);  else    PORTA |= BIT(HARD::LED_GREEN);
//     if(Color & 0x04) PORTA &= ~BIT(HARD::LED_BLUE);   else    PORTA |= BIT(HARD::LED_BLUE);
//    */
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Управление RGB-светодиодом HL2 (RGB компоненты - биты 0,1,2)
//void HARD::SetRGBLed_2(unsigned char Color)
//{
//    unsigned char Port = PORTF & (~(BIT(HARD::LED2_RED) | BIT(HARD::LED2_GREEN) | BIT(HARD::LED2_BLUE)));
//
//    if(Color & 0x01) Port |= BIT(HARD::LED2_RED);
//    if(Color & 0x02) Port |= BIT(HARD::LED2_GREEN);
//    if(Color & 0x04) Port |= BIT(HARD::LED2_BLUE);
//
//    PORTF = Port;
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Функция записи данных в EEPROM для отладочных целей (EEWE -> EEPE)
//void HARD::SaveEEPROM(unsigned short Addr,void *Ptr,unsigned char Count)
//{
//    unsigned char *Data = (unsigned char *)Ptr;
//    unsigned char  IFlag;
//
//    do
//    {
//        while(EECR & BIT(EEPE)) { };		// Цикл ожидания завершения предыдущей записи
//
//        EEAR = Addr++;			// Устанавливаем адрес в EEPROM
//
//        IFlag = __save_interrupt();
//
//        __watchdog_reset();
//        __disable_interrupt();
//
//        EEDR  = *Data++;
//        EECR |= BIT(EEMPE);                   // EEMWE - Atmega128
//        EECR |= BIT(EEPE);                    // EEPE  - Atmega128
//
//        __restore_interrupt(IFlag);
//
//    }
//    while(--Count);
//
//    EEAR = 0x0000;				// Устанавливаем 0x0000 для безопасности
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Функция  чтения данных из EEPROM для отладочных целей (EEWE -> EEPE)
//void HARD::ReadEEPROM(void *Ptr,unsigned short Addr,unsigned char Count)
//{
//    unsigned char *Data = (unsigned char *)Ptr;
//
//    while(EECR & BIT(EEPE)) { };		// Цикл ожидания завершения предыдущей записи
//
//    do
//    {
//        EEAR  = Addr++;			// Устанавливаем адрес в EEPROM и
//        EECR |= BIT(EERE);			// считываем байт
//
//        *Data++ = EEDR;			// Сохраняем считанный байт в буфер
//    }
//    while(--Count);
//
//    EEAR = 0x0000;                         // Обнуляем для безопасности
//};
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
//// Тест звукового сигнала
///*
//void HARD::Beep(unsigned short Miliseconds)
//{
// HARD::EnableSound();
// __watchdog_reset();
// //__delay_cycles(XTAL * Miliseconds * 1000L);
// HARD::DisableSound();
//};*/
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////------------------------------------------------------------------------------
