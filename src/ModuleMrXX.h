//-----------------------------------------------------------------------------------------------------
//  Source      : FileName.cpp
//  Created     : 01.06.2022
//  Author      : Alexandr Volvenkin
//  email       : aav-36@mail.ru
//  GitHub      : https://github.com/AlexandrVolvenkin
//-----------------------------------------------------------------------------------------------------
#ifndef CMODULEMRXX_H
#define CMODULEMRXX_H

//-----------------------------------------------------------------------------------------------------
#include <stdint.h>
#include "PasNewConfig.h"
#include "Driver.h"
#include "DataTypes.h"
//#include "Timer.h"
//#include "Task.h"
#include "Dfa.h"

//-----------------------------------------------------------------------------------------------------
enum
{
    MRXX_FSM_STATE_CHANGE_PROTOCOL = 0x00,
// состояние автомата - запись базы данных.
    MRXX_FSM_STATE_WRITE_DATABASE = 0x01,
// состояние автомата - нормальный обмен.
    MRXX_FSM_STATE_TRANSFER = 0x02,
};

enum
{
    MRXX_IDDLE = 0,
    MRXX_CHANGE_PROTOCOL,
    MRXX_WRITE_DATA_BASE,
    MRXX_WRITE_DATA_BASE_CHECK,
    MRXX_DATA_EXCHANGE,
};


enum
{
    MRXX_RELAY_STATE_OFFSET = 2,
// байты состояния обмоток 8 реле модуля. только МР53.
// байт - 2: состояния обмоток реле, если бит = 1 - короткое замыкание.
    MRXX_STAT_DO_SHORT_CIRCUIT_BIT_OFFSET = 3,
// байт - 3: состояния обмоток реле, если бит = 1 - обрыв.
    MRXX_STAT_DO_BREACK_BIT_OFFSET = 4,
// код события - включение-выключение реле.
    MRXX_ERROR_CODE_RELAY_ON_OFF = 0x01,
// код события - включение-выключение реле.
    MRXX_ERROR_CODE_RELAY_SHORT_CIRCUIT = 0x04,
// код события - включение-выключение реле.
    MRXX_ERROR_CODE_RELAY_BREACK = 0x08,
};

enum
{
// биты управления МР байта f_bou.
// квитирование с верхнего уровня.
    GLOBAL_KVIT_PC_BIT = 0,
// сброс с верхнего уровня.
    GLOBAL_RESET_PC_BIT = 1,
// квитирование с цетральной панели МИНД.
    GLOBAL_KVIT_BUTTON_BIT = 2,
// сброс с цетральной панели МИНД.
    GLOBAL_RESET_BUTTON_BIT = 3,
// режим блокировки.
    GLOBAL_BLOCK_BIT = 4,
};

enum
{
// биты описателя базы данных выходных дискретных сигналов.
// байт 0 (рез.,рез,КВЦ,СБЦ,ВУК,ВУС,БЛ/ТК,ТИП).
// ТИП – тип выхода 0 – сигнализирующий, 1 – управляющий
    OUTPUT_TYPE_MASK = 0x01,
// БЛ/ТК: для управляющего выхода: 1 – с блокировкой, 0 – без блокировки;
// для сигнализирующего выхода: - 1 квитирование с гашением (звук),
// 0 – квитирование с переводом в постоянное значение (свет);
    BLOCK_ALARM_TYPE_MASK = 0x02,
// ВУС – сброс с верхнего уровня: 1 – есть, 0 – нет;
    PC_RESET_MASK = 0x04,
// ВУК – квитирование с верхнего уровня: 1 – есть, 0 – нет; (только для сигн. выхода);
    PC_KVIT_MASK = 0x08,
// СБЦ – сброс с центральной панели МИНД: 1 – есть, 0 – нет;
    BUTTON_RESET_MASK = 0x10,
// КВЦ – квитирование с центральной панели МИНД: 1 – есть, 0 – нет (только для сигн. выхода);
    BUTTON_KVIT_MASK = 0x20,
// D7 - АРХ =1 архивировать, 0 – не архивировать.
    ARCHIVE_MRXX_MASK = 0x80,
};

enum
{
    DATA_EXCHANGE_COMMAND = 0x42,
    DATA_READY = 0x42,
//        // Нормальное завершение обмена
//        DATA_EXCHANGE_OK	= 0x7E,
    DATA_EXCHANGE_OK_LENGTH = 1,
    // Данные не готовы
    DATA_NOT_READY	= 0x24,
    // БД повреждена
    DBASE_ERR	= 0x24,
    // Запрос на передачу базы данных от МЦП к МР - $81.
    MRXX_SET_DATA_BASE_COMMAND = 0x81,
    MRXX_SET_DATA_BASE_COMMAND_ERROR = 0xE7,
    // количество байт в пакете обмена данными, кроме, CRC - 2 байта и байта подтверждения.
    MRXX_GET_DISCRETE_OUTPUT_DATA_COMMAND_ANSWER_LENGTH = 5,
    // количество байт в пакете записи базы данных, кроме, CRC - 2 байта и байта подтверждения.
    MRXX_SET_DATA_BASE_COMMAND_ANSWER_LENGTH = 8,
    // длина ответного сообщения не включающая PREAMBLE_LENGTH + TWO_BYTE_CRC_LENGTH.
    DATA_EXCHANGE_COMMAND_ANSWER_LENGTH = 5,
    PRIAMBLE_LENGTH = 2,
    // 2 - смещение на данные в массиве RX SPI. 0 - команда запроса, 1 - "эхо" команды запроса.
    DATA_BYTE_OFFSET = 2,
    // 1 - смещение на команду в массиве RX SPI.
    COMMAND_BYTE_OFFSET = 1,
    COMMAND_BYTE_LENGTH = 1,
};

enum
{
    SPI_MT_PRIAMBLE_LENGTH = 2,
    SPI_MT_FUNCTION_CODE_OFFSET = 0,
    SPI_MT_LENGTH_OFFSET = 1,
    SPI_MT_DATA_OFFSET = 2,
    SPI_MT_RX_OFFSET = 1,
};


//-----------------------------------------------------------------------------------------------------




////-----------------------------------------------------------------------------------------------------
//class CModuleMrXXDriver : public CDriver, public CDfa
//{
//public:
////    enum
////    {
////        DATA_EXCHANGE_COMMAND = 0x42,
////        DATA_READY = 0x42,
////        // Нормальное завершение обмена
////        DATA_EXCHANGE_OK	= 0x7E,
////        DATA_EXCHANGE_OK_LENGTH = 1,
////        // Данные не готовы
////        DATA_NOT_READY	= 0x24,
////        // БД повреждена
////        DBASE_ERR	= 0x24,
////        // Запрос на передачу базы данных от МЦП к МР - $81.
////        MRXX_SET_DATA_BASE_COMMAND = 0x81,
////        // количество байт в пакете обмена данными, кроме, CRC - 2 байта и байта подтверждения.
////        MRXX_GET_DISCRETE_OUTPUT_DATA_COMMAND_ANSWER_LENGTH = 5,
////        // количество байт в пакете записи базы данных, кроме, CRC - 2 байта и байта подтверждения.
////        MRXX_SET_DATA_BASE_COMMAND_ANSWER_LENGTH = 8,
////        // длина ответного сообщения не включающая PREAMBLE_LENGTH + TWO_BYTE_CRC_LENGTH.
////        DATA_EXCHANGE_COMMAND_ANSWER_LENGTH = 5,
////        PRIAMBLE_LENGTH = 2,
////        // 2 - смещение на данные в массиве RX SPI. 0 - команда запроса, 1 - "эхо" команды запроса.
////        DATA_BYTE_OFFSET = 2,
////        // 1 - смещение на команду в массиве RX SPI.
////        COMMAND_BYTE_OFFSET = 1,
////        COMMAND_BYTE_LENGTH = 1,
////    };
////
//    CModuleMrXXDriver(uint8_t uiType);
//    CModuleMrXXDriver();
//    virtual ~CModuleMrXXDriver();
////    int ChangeProtocol(TModuleContext *pxModuleContext);
//    void Allocate(TMemoryAllocationConext &xMemoryAllocationConext);
//    uint8_t WriteDataBase(void);
//    uint8_t DataExchange(void);
//    uint8_t Exchange(void);
//    void Fsm(void);
//
//protected:
//    uint8_t m_uiAddress;
//    uint8_t *m_puiRxBuffer;
//    uint8_t *m_puiTxBuffer;
//    uint8_t *m_puiDiscreteInputs;
//    uint8_t *m_puiDiscreteOutputState;
//    TDiscreteOutputControl *m_pxDiscreteOutputControl;
//    TOutputData *m_pxDiscreteOutputDataBase;
//    uint8_t m_uiBadAnswerCounter;
//};
//////-----------------------------------------------------------------------------------------------------
////#endif // CMODULEMRXX_H









//#ifndef MODULEMRXX_H_INCLUDED
//#define MODULEMRXX_H_INCLUDED
//
//
//#include "PasNewConfig.h"


//============================================================================
// MR
// коды типа модуля.
//#define MODULE_TYPE_MR53 0x03
//#define MODULE_TYPE_MR54 0x04
//#define MODULE_TYPE_MR55 0x05
//#define MODULE_TYPE_MR51 0x0C
// количество выходов управления реле.
#define MRXX_DISCRETE_OUTPUT_QUANTITY 8
// количество байт занимаемое одним модулем в рабочих массивах Modbus.
#define MRXX_DO_VALUE_BIT_ARRAY_LENGTH MRXX_DISCRETE_OUTPUT_QUANTITY
#define MRXX_SOST_DO_BIT_ARRAY_LENGTH MRXX_DISCRETE_OUTPUT_QUANTITY
#define MRXX_BAD_DO_BIT_ARRAY_LENGTH MRXX_DISCRETE_OUTPUT_QUANTITY
// в буфере MRXX_STAT_DO_BIT_ARRAY статистика одного реле занимает 2 бита:
// 1 - обрыв; 2 - замыкание.
#define MRXX_STAT_DO_ONE_OUTPUT_LENGTH 2
#define MRXX_STAT_DO_BIT_ARRAY_LENGTH (MRXX_DISCRETE_OUTPUT_QUANTITY * MRXX_STAT_DO_ONE_OUTPUT_LENGTH)
#define MRXX_MODULE_BAD_BIT_ARRAY_LENGTH 1

// Запрос на циклический обмен-$42.
#define MRXX_GET_DISCRETE_OUTPUT_DATA_COMMAND 0x42
// $42-данные готовы (ЭХО).
#define MRXX_DATA_READY 0x42
// $24-ошибка БД, конец связи.
#define MRXX_DATA_BASE_ERROR 0x24
//// Запрос на передачу базы данных от МЦП к МР - $81.
//#define MRXX_SET_DATA_BASE_COMMAND 0x81
//// количество байт в пакете обмена данными, кроме, CRC - 2 байта и байта подтверждения.
//#define MRXX_GET_DISCRETE_OUTPUT_DATA_COMMAND_ANSWER_LENGTH 5
//// количество байт в пакете записи базы данных, кроме, CRC - 2 байта и байта подтверждения.
//#define MRXX_SET_DATA_BASE_COMMAND_ANSWER_LENGTH 8
//
//// состояние автомата - нормальный обмен.
//#define MRXX_FSM_STATE_TRANSFER 0x00
//// состояние автомата - запись базы данных.
//#define MRXX_FSM_STATE_WRITE_DATABASE 0x01
//// байты состояния обмоток 8 реле модуля. только МР53.
//// байт - 2: состояния обмоток реле, если бит = 1 - короткое замыкание.
//#define MRXX_STAT_DO_SHORT_CIRCUIT_BIT_OFFSET 0
//// байт - 3: состояния обмоток реле, если бит = 1 - обрыв.
//#define MRXX_STAT_DO_BREACK_BIT_OFFSET 1
//// код события - включение-выключение реле.
//#define MRXX_ERROR_CODE_RELAY_ON_OFF 0x01
//// код события - включение-выключение реле.
//#define MRXX_ERROR_CODE_RELAY_SHORT_CIRCUIT 0x04
//// код события - включение-выключение реле.
//#define MRXX_ERROR_CODE_RELAY_BREACK 0x08
//
//// биты управления МР байта f_bou.
//// квитирование с верхнего уровня.
//#define GLOBAL_KVIT_PC_BIT 0
//// сброс с верхнего уровня.
//#define GLOBAL_RESET_PC_BIT 1
//// квитирование с цетральной панели МИНД.
//#define GLOBAL_KVIT_BUTTON_BIT 2
//// сброс с цетральной панели МИНД.
//#define GLOBAL_RESET_BUTTON_BIT 3
//// режим блокировки.
//#define GLOBAL_BLOCK_BIT 4
//
//// биты описателя базы данных выходных дискретных сигналов.
//// байт 0 (рез.,рез,КВЦ,СБЦ,ВУК,ВУС,БЛ/ТК,ТИП).
//// ТИП – тип выхода 0 – сигнализирующий, 1 – управляющий
//#define OUTPUT_TYPE_MASK 0x01
//// БЛ/ТК: для управляющего выхода: 1 – с блокировкой, 0 – без блокировки;
//// для сигнализирующего выхода: - 1 квитирование с гашением (звук),
//// 0 – квитирование с переводом в постоянное значение (свет);
//#define BLOCK_ALARM_TYPE_MASK 0x02
//// ВУС – сброс с верхнего уровня: 1 – есть, 0 – нет;
//#define PC_RESET_MASK 0x04
//// ВУК – квитирование с верхнего уровня: 1 – есть, 0 – нет; (только для сигн. выхода);
//#define PC_KVIT_MASK 0x08
//// СБЦ – сброс с центральной панели МИНД: 1 – есть, 0 – нет;
//#define BUTTON_RESET_MASK 0x10
//// КВЦ – квитирование с центральной панели МИНД: 1 – есть, 0 – нет (только для сигн. выхода);
//#define BUTTON_KVIT_MASK 0x20
//// D7 - АРХ =1 архивировать, 0 – не архивировать.
//#define ARCHIVE_MRXX_MASK 0x80

// структура описателя одного дискретноговыхода.
struct TMrXXOneChannelDataBase
{
    // байт 0 (рез.,рез,КВЦ,СБЦ,ВУК,ВУС,БЛ/ТК,ТИП).
    // ТИП – тип выхода 0 – сигнализирующий, 1 – управляющий;
    // БЛ/ТК:
    // для управляющего выхода: 1 – с блокировкой, 0 – без блокировки;
    // для сигнализирующего выхода: - 1 квитирование с гашением (звук), 0 – квитирование с переводом в постоянное значение (свет);
    // КВЦ – квитирование с центральной панели МИНД: 1 – есть, 0 – нет (только для сигн. выхода);
    // СБЦ – сброс с центральной панели МИНД: 1 – есть, 0 – нет;
    // ВУК – квитирование с верхнего уровня: 1 – есть, 0 – нет; (только для сигн. выхода);
    // ВУС – сброс с верхнего уровня: 1 – есть, 0 – нет;
    unsigned char ucControl;
    // байт1 - КВ_АДР - адрес входного сигнала внешнего квитирования.
    unsigned char ucExternalKvitAddress;
    // байт2 - СБ_АДР - адрес входного сигнала внешнего сброса.
    unsigned char ucExternalResetAddress;
};

//#endif // MODULEMRXX_H_INCLUDED

//-----------------------------------------------------------------------------------------------------
#endif // CMODULEMRXX_H
